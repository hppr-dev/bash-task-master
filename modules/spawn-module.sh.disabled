arguments_spawn(){
  SUBCOMMANDS='start|stop|kill|list|output|clean'

  START_DESCRIPTION='Start a background process'
  START_REQUIREMENTS='proc:p:str'
  START_OPTIONS='out:n:str'

  STOP_DESCRIPTION='Stop a backgroup process'
  STOP_REQUIREMENTS='num:n:int'
  KILL_DESCRIPTION=$STOP_DESCRIPTION
  KILL_REQUIREMENTS=$STOP_DESCRIPTION

  OUTPUT_DESCRIPTION='Show the output of a backgrounded process'
  OUTPUT_REQUIREMENTS='num:n:int'
  OUTPUT_OPTIONS='follow:f:bool'

  LIST_DESCRIPTION='List backgrounded processes'

  CLEAN_DESCRIPTION='Stop all backgrounded processes'
  
}

spawn_help() {
  HELP_STRING="usage: task spawn (start|stop|kill|stop|list|output|clean)

  To start a background process run:

        task spawn start --proc 'my process' [--out outfile]

  To stop a background proccess run:

        task spawn stop --num 1

  To list the numbered processes run:

        task spawn list

  To show the output of the backgrounded process run:

        task spawn output --num 2 [--follow]

  To kill and clean all spawned processes run:

        task spawn clean
  "

  echo "HELP_STRING"
}

task_spawn() {
  if [[ ! -z "$ARG_HELP" ]] || [[ $TASK_SUBCOMMAND == "help" ]]
  then 
    spawn_help
  elif [ $TASK_SUBCOMMAND == "start" ]
  then
    spawn_start
  elif [ $TASK_SUBCOMMAND == "stop" ] || [ $TASK_SUBCOMMAND == "kill" ]
  then
    spawn_stop
  elif [ $TASK_SUBCOMMAND == "list" ]
  then
    spawn_list
  elif [ $TASK_SUBCOMMAND == "output" ]
  then
    spawn_output
  elif [ $TASK_SUBCOMMAND == "clean" ]
  then
    spawn_clean
  else
    echo "Unknown subcommand: $TASK_SUBCOMMAND"
    spawn_help
  fi
}

spawn_start() {
  if [[ -z "$ARG_PROC" ]]
  then
    echo "No --proc argument supplied can't spawn"
    return
  fi
  if [[ -z "$NUM_SPAWNED" ]]
  then
    NUM_SPAWNED=0
  fi
  persist_var NUM_SPAWNED $(expr $NUM_SPAWNED + 1)
  if [[ -z "$ARG_OUT" ]]
  then
    ARG_OUT=$TASKS_DIR/.spawn$NUM_SPAWNED.out
    echo "NO --out argument supplied defaulting to $ARG_OUT"
  fi
  nohup $ARG_PROC &> $ARG_OUT &
  persist_var "SPAWNED_PROC[$NUM_SPAWNED]" "$!"
  persist_var "SPAWNED_PROC_NAME[$NUM_SPAWNED]" "$ARG_PROC"
  persist_var "SPAWNED_PROC_OUT[$NUM_SPAWNED]" "$ARG_OUT"
}

spawn_stop() {
  if [[ -z "$ARG_NUM" ]]
  then
    echo "No --num argument supplied"
    echo "Defaulting to 1"
    ARG_NUM=1
  fi
  if [[ -z "$NUM_SPAWNED" ]] || [[ "$NUM_SPAWNED" == "0" ]]
  then
    echo "No processes running..."
    return 0
  fi
  echo "Killing ${SPAWNED_PROC[$ARG_NUM]}..."
  ps ${SPAWNED_PROC[$ARG_NUM]} > /dev/null
  if [[ "$?" == "0" ]]
  then
    kill ${SPAWNED_PROC[$ARG_NUM]}
  else
    echo "Process ${SPAWNED_PROC[$ARG_NUM]} not found"
  fi
  remove_var "SPAWNED_PROC[$ARG_NUM]"
  remove_var "SPAWNED_PROC_NAME[$ARG_NUM]"
  remove_var "SPAWNED_PROC_OUT[$ARG_NUM]"
  # Shift processes back
  while [[ $ARG_NUM < $NUM_SPAWNED ]]
  do
    ARG_NUM_MV=$(expr $ARG_NUM + 1)
    persist_var "SPAWNED_PROC[$ARG_NUM]" "${SPAWNED_PROC[$ARG_NUM_MV]}"
    persist_var "SPAWNED_PROC_NAME[$ARG_NUM]" "${SPAWNED_PROC_NAME[$ARG_NUM_MV]}"
    persist_var "SPAWNED_PROC_OUT[$ARG_NUM]" "${SPAWNED_PROC_OUT[$ARG_NUM_MV]}"
    ARG_NUM=$ARG_NUM_MV
  done
  persist_var NUM_SPAWNED $(expr $NUM_SPAWNED - 1)
}

spawn_list() {
  echo "Listing spawned processes:"
  if [[ -z "$NUM_SPAWNED" ]] || [[ "$NUM_SPAWNED" == "0" ]]
  then
    echo "No processes running..."
    return 0
  fi
  for i in $(seq 1 $NUM_SPAWNED)
  do
    echo "   $i : ${SPAWNED_PROC_NAME[$i]} -> ${SPAWNED_PROC_OUT[$i]}"
  done
}

spawn_output() {
  if [[ -z "$ARG_NUM" ]]
  then
    echo "No --num argument supplied"
    echo "Use 'task spawn list' to find a number to stop"
    return
  fi
  if [[ -z "$NUM_SPAWNED" ]] || [[ "$NUM_SPAWNED" == "0" ]]
  then
    echo "No processes running..."
    return 0
  fi
  if [[ ! -z "$ARG_FOLLOW" ]]
  then
    tailf ${SPAWNED_PROC_OUT[$ARG_NUM]}
  else
    cat ${SPAWNED_PROC_OUT[$ARG_NUM]}
  fi
}

spawn_clean() {
  echo "Cleaning..."
  echo "Killing all processes..."
  if [[ -z "$NUM_SPAWNED" ]] || [[ "$NUM_SPAWNED" == "0" ]]
  then
    echo "No processes running..."
    return 0
  fi
  for num in $(seq 1 ${#SPAWNED_PROC[@]})
  do
    echo "Killing ${SPAWNED_PROC[$num]}..."
    ps ${SPAWNED_PROC[$num]} > /dev/null
    if [[ "$?" == "0" ]]
    then
      kill ${SPAWNED_PROC[$num]}
    else
      echo "Process ${SPAWNED_PROC[$num]} not found"
    fi
    remove_var "SPAWNED_PROC[$num]"
    remove_var "SPAWNED_PROC_NAME[$num]"
    remove_var "SPAWNED_PROC_OUT[$num]"
    persist_var "NUM_SPAWNED" "0"
  done
  echo "Cleaning all autogenerated spawn files from $TASKS_DIR"
  rm -f $TASKS_DIR/.spawn*.out
}


readonly -f arguments_spawn
readonly -f spawn_help
readonly -f task_spawn
readonly -f spawn_start
readonly -f spawn_stop
readonly -f spawn_list
readonly -f spawn_output
readonly -f spawn_clean
